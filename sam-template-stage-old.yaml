---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless Express Application/API powered by API Gateway and Lambda
Parameters:
    DomainName:
        Type: String
        Description: API Domain name
        Default: $DomainName
    Certificate:
        Type: String
        Description: Certificate
        Default: $Certificate

Conditions:
    UseDomainName: !Not
        - !Equals
            - !Ref DomainName
            - ''
    UseCertificate: !Not
        - !Equals
            - !Ref Certificate
            - ''

Resources:
    ExpressApi:
        Type: AWS::Serverless::HttpApi

    ExpressLambdaFunction:
        Type: AWS::Serverless::Function
        Properties:
            CodeUri: ./dist
            PackageType: Zip
            Runtime: nodejs18.x
            Handler: lambda.handler
            MemorySize: 1024
            Timeout: 30
        Events:
            ProxyApiRoot:
                Type: HttpApi
                Properties:
                    ApiId: !Ref ExpressApi

                Policies:
                    - SESBulkTemplatedCrudPolicy:
                          IdentityName: mamboleofc.ca
                    - SESEmailTemplateCrudPolicy: {}
    MyApiCertificate:
        Type: 'AWS::CertificateManager::Certificate'
        Condition: UseCertificate
        Properties:
            DomainName: !Sub '*.${Certificate}'
            DomainValidationOptions:
                - DomainName: !Sub '*.${Certificate}'
                  ValidationDomain: !Ref Certificate
            SubjectAlternativeNames:
                - !Ref Certificate
                - !Sub '*.${Certificate}'

    MyApiDomainName:
        Type: 'AWS::ApiGateway::DomainName'
        Condition: UseDomainName
        Properties:
            CertificateArn: !Ref MyApiCertificate
            DomainName: !Ref DomainName

    MyApiBasePathMapping:
        Type: 'AWS::ApiGateway::BasePathMapping'
        Condition: UseDomainName
        Properties:
            RestApiId: !Ref ExpressApi
            DomainName: !Ref MyApiDomainName
            BasePath: '(none)'
            Stage: prod

    Route53HostedZone:
        Type: AWS::Route53::HostedZone
        Condition: UseDomainName
        Properties:
            Name: !Ref DomainName

    MyApiRoute53RecordSetGroup:
        Type: AWS::Route53::RecordSetGroup
        Condition: UseDomainName
        Properties:
            HostedZoneId: !Ref Route53HostedZone
            RecordSets:
                - Name: !Sub ${DomainName}.
                  Type: A
                  AliasTarget:
                      EvaluateTargetHealth: false
                      HostedZoneId: !GetAtt MyApiDomainName.DistributionHostedZoneId
                      DNSName: !GetAtt MyApiDomainName.DistributionDomainName

Outputs:
    LambdaFunctionConsoleUrl:
        Description: Console URL for the Lambda Function.
        Value: !Sub https://${AWS::Region}.console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${ExpressLambdaFunction}

    ApiGatewayApiConsoleUrl:
        Description: Console URL for the API Gateway API's Stage.
        Value: !Sub https://${AWS::Region}.console.aws.amazon.com/apigateway/home?region=${AWS::Region}#/apis/${ExpressApi}/stages/prod

    ApiUrl:
        Description:
            Invoke URL for your API. Clicking this link will perform a GET request
            on the root resource of your API.
        Value: !Sub https://${ExpressApi}.execute-api.${AWS::Region}.amazonaws.com/

    LambdaFunctionName:
        Description: Name of the Serverless Express Lambda Function
        Value: !Ref ExpressLambdaFunction




---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless Express Application/API powered by API Gateway and Lambda
Parameters:
    DomainName:
        Type: String
        Description: API Domain name
        Default: $DomainName
    Certificate:
        Type: String
        Description: Certificate
        Default: $Certificate

Conditions:
    UseDomainName: !Not
        - !Equals
            - !Ref DomainName
            - ''
    UseCertificate: !Not
        - !Equals
            - !Ref Certificate
            - ''

Conditions:
  UseDomainName:
    !Not
    - !Equals
      - !Ref DomainName
      - ''

Resources:
  ExpressApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: stage

  ExpressLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist
      PackageType: Zip
      Runtime: nodejs18.x
      Handler: lambda.handler
      MemorySize: 1024
      Timeout: 30
      Events:
        Game:
          Type: Api
          Properties:
            RestApiId: !Ref ExpressApi
            Path: /api/v1/game
            Method: ANY
        Team:
          Type: Api
          Properties:
            RestApiId: !Ref ExpressApi
            Path: /api/v1/team
            Method: ANY
        User:
          Type: Api
          Properties:
            RestApiId: !Ref ExpressApi
            Path: /api/v1/user
            Method: ANY
        UserSignIn:
          Type: Api
          Properties:
            RestApiId: !Ref ExpressApi
            Path: /api/v1/user/sign-in
            Method: ANY
        UserSignUp:
          Type: Api
          Properties:
            RestApiId: !Ref ExpressApi
            Path: /api/v1/user/sign-up
            Method: ANY
        UserAvatar:
          Type: Api
          Properties:
            RestApiId: !Ref ExpressApi
            Path: /api/v1/user/avatar
            Method: ANY
        Gallery:
          Type: Api
          Properties:
            RestApiId: !Ref ExpressApi
            Path: /api/v1/gallery
            Method: ANY
        GalleryImage:
          Type: Api
          Properties:
            RestApiId: !Ref ExpressApi
            Path: /api/v1/gallery/image
            Method: ANY
        GalleryImages:
          Type: Api
          Properties:
            RestApiId: !Ref ExpressApi
            Path: /api/v1/gallery/images
            Method: ANY
        Mail:
          Type: Api
          Properties:
            RestApiId: !Ref ExpressApi
            Path: /api/v1/mail
            Method: ANY
        Event:
          Type: Api
          Properties:
            RestApiId: !Ref ExpressApi
            Path: /api/v1/event
            Method: ANY
        EventImport:
          Type: Api
          Properties:
            RestApiId: !Ref ExpressApi
            Path: /api/v1/event/import
            Method: ANY
        Roster:
          Type: Api
          Properties:
            RestApiId: !Ref ExpressApi
            Path: /api/v1/roster
            Method: ANY
        Access:
          Type: Api
          Properties:
            RestApiId: !Ref ExpressApi
            Path: /api/v1/access
            Method: ANY
        About:
            Type: Api
            Properties:
                RestApiId: !Ref ExpressApi
                Path: /api/v1/about
                Method: ANY
        Page:
            Type: Api
            Properties:
                RestApiId: !Ref ExpressApi
                Path: /api/v1/page
                Method: ANY

        Deploy:
            Type: Api
            Properties:
                RestApiId: !Ref ExpressApi
                Path: /api/v1/deploy
                Method: ANY

      Policies:
        - SESBulkTemplatedCrudPolicy:
            IdentityName: mamboleofc.ca
        - SESEmailTemplateCrudPolicy: {}


    MyApiCertificate:
        Type: 'AWS::CertificateManager::Certificate'
        Condition: UseCertificate
        Properties:
            DomainName: !Sub '*.${Certificate}'
            DomainValidationOptions:
                - DomainName: !Sub '*.${Certificate}'
                  ValidationDomain: !Ref Certificate
            SubjectAlternativeNames:
                - !Ref Certificate
                - !Sub '*.${Certificate}'

  MyApiDomainName:
    Type: 'AWS::ApiGateway::DomainName'
    Condition: UseDomainName
    Properties:
      CertificateArn: !Ref MyApiCertificate
      DomainName: !Ref DomainName

  MyApiBasePathMapping:
    Type: 'AWS::ApiGateway::BasePathMapping'
    Condition: UseDomainName
    Properties:
      RestApiId: !Ref ExpressApi
      DomainName: !Ref MyApiDomainName
      BasePath: '(none)'
      Stage: stage

  Route53HostedZone:
    Type: AWS::Route53::HostedZone
    Condition: UseDomainName
    Properties:
      Name: !Ref DomainName

  MyApiRoute53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Condition: UseDomainName
    Properties:
      HostedZoneId: !Ref Route53HostedZone
      RecordSets:
        - Name: !Sub ${DomainName}.
          Type: A
          AliasTarget:
            EvaluateTargetHealth: false
            HostedZoneId: !GetAtt MyApiDomainName.DistributionHostedZoneId
            DNSName: !GetAtt MyApiDomainName.DistributionDomainName

Outputs:
  LambdaFunctionConsoleUrl:
    Description: Console URL for the Lambda Function.
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${ExpressLambdaFunction}

  ApiGatewayApiConsoleUrl:
    Description: Console URL for the API Gateway API's Stage.
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/apigateway/home?region=${AWS::Region}#/apis/${ExpressApi}/stages/stage

  ApiUrl:
    Description: Invoke URL for your API. Clicking this link will perform a GET request
      on the root resource of your API.
    Value: !Sub https://${ExpressApi}.execute-api.${AWS::Region}.amazonaws.com/

  LambdaFunctionName:
    Description: Name of the Serverless Express Lambda Function
    Value: !Ref ExpressLambdaFunction
